module.exports = {
  config: {
    name: "gart",
    version: "1.0.0",
    permission: 0,
    credits: "Tofazzal Hossain", // ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü Tofazzal Hossain-‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    description: "Generate images with a prompt, style, and specified amount from the provided API.",
    prefix: true,
    category: "prefix",
    usages: "[prompt] .stl [style] .cnt [amount (optional)]", 
    cooldowns: 10,
  },

  languages: {
    "vi": {},
    "en": {
      "missing_prompt_style": 'Please provide both a prompt and a style using the format: /gart [your prompt] .stl [your style] .cnt [amount (optional)]\nExample: /gart a-boy-is-playing .stl logo .cnt 2',
      "invalid_amount": "The amount must be a number greater than 0 and less than or equal to 4.", // 4 ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
      "error_generating": "An error occurred while generating the image(s). Please check your prompt and style, then try again later.",
      "no_images_generated": "Could not generate any images. Please try a different prompt or style."
    }
  },

  start: async function({ nayan, events, args, lang }) {
    const axios = require("axios");
    const fs = require("fs-extra");

    let prompt = "";
    let style = "";
    let amount = 1; // Default amount of images is 1 (‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)

    // Find the positions of '.stl' and '.cnt'
    const stlIndex = args.indexOf(".stl");
    const cntIndex = args.indexOf(".cnt");

    // Validate command structure
    if (stlIndex === -1 || stlIndex === 0) { // .stl ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞‡ßá
      return nayan.reply(lang('missing_prompt_style'), events.threadID, events.messageID);
    }

    // Extract prompt
    prompt = args.slice(0, stlIndex).join(" ");

    // Extract style
    if (cntIndex !== -1 && cntIndex > stlIndex) { // If .cnt is present after .stl
      style = args.slice(stlIndex + 1, cntIndex).join(" ");
    } else { // If only .stl is present or .cnt is in wrong place
      style = args.slice(stlIndex + 1).join(" ");
    }

    // Extract amount if .cnt is present and valid
    if (cntIndex !== -1 && cntIndex > stlIndex) {
      const parsedAmount = parseInt(args[cntIndex + 1]);
      if (isNaN(parsedAmount) || parsedAmount <= 0 || parsedAmount > 4) { // ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö 4‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø
        return nayan.reply(lang('invalid_amount'), events.threadID, events.messageID);
      }
      amount = parsedAmount;
    }

    if (!prompt || !style) {
      return nayan.reply(lang('missing_prompt_style'), events.threadID, events.messageID);
    }

    let imgData = [];
    let generatedCount = 0;
    
    // ‡¶õ‡¶¨‡¶ø ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®
    const loadingMessage = await nayan.reply("Generating your image(s)... Please wait.", events.threadID, events.messageID);


    try {
      for (let i = 0; i < amount; i++) {
        const apiUrl = `https://imggen-delta.vercel.app/?prompt=${encodeURIComponent(prompt)}&style=${encodeURIComponent(style)}`;

        const res = await axios.get(apiUrl);

        if (res.data && res.data.ok === true && res.data.url) { // API response ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
          const imageUrl = res.data.url;
          // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶®‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
          const path = __dirname + `/cache/gart_image_${events.senderID}_${Date.now()}_${i}.png`; 
          const getDown = (await axios.get(imageUrl, { responseType: 'arraybuffer' })).data;
          fs.writeFileSync(path, Buffer.from(getDown, 'binary'));
          imgData.push(fs.createReadStream(path));
          generatedCount++;
        } else {
          console.warn(`API did not return a valid image URL for prompt "${prompt}" and style "${style}" (attempt ${i + 1}). Response: ${JSON.stringify(res.data)}`);
        }
      }

      // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      await nayan.unsend(loadingMessage.messageID);

      if (imgData.length === 0) {
        return nayan.reply(lang('no_images_generated'), events.threadID, events.messageID);
      }

      await nayan.reply({
        attachment: imgData,
        body: `üîçImagine Resultüîç\n\nüìùPrompt: ${prompt}\n‚ú®Style: ${style}\n#Ô∏è‚É£Generated Images: ${generatedCount}\n\nGenerated by: Tofazzal Hossain`
      }, events.threadID, events.messageID);

    } catch (error) {
      // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º
      await nayan.unsend(loadingMessage.messageID);
      console.error("Error in gart command:", error);
      return nayan.reply(lang('error_generating'), events.threadID, events.messageID);
    } finally {
      // Clean up cached images
      for (const stream of imgData) {
        if (fs.existsSync(stream.path)) {
          fs.unlinkSync(stream.path);
        }
      }
    }
  }
};
