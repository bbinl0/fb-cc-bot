module.exports = {
  config: {
    name: "gart", // ржХржорж╛ржирзНржбрзЗрж░ ржирж╛ржо 'gart' ржП ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    version: "1.0.0",
    permission: 0,
    credits: "Nayan", // ржХрзНрж░рзЗржбрж┐ржЯ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд рж░рж╛ржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗ
    description: "Generate images from a prompt with an optional style and amount.",
    prefix: true,
    category: "prefix",
    usages: "gart [prompt] .stl [style] .cnt [amount]", // ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    cooldowns: 10,
  },

  languages: {
    "vi": {},
    "en": {
      "missing_prompt": 'Please provide a prompt. Usage: /gart a cat .stl anime .cnt 2',
      "generating_message": "Generating your image(s), please wait...", // ржирждрзБржи ржорзЗрж╕рзЗржЬ
      "error": "An error occurred while generating the image. Please try again later."
    }
  },

  start: async function({ nayan, events, args, lang }) {
    const axios = require("axios");
    const fs = require("fs-extra");

    // prompt, style ржПржмржВ amount ржЖрж▓рж╛ржжрж╛ ржХрж░рж╛
    let prompt = "";
    let style = "";
    let amount = 1; // Default to 1 image

    const argString = args.join(" ");
    const promptMatch = argString.match(/(.*?)(?:\s*\.stl\s*(.*?))?(?:\s*\.cnt\s*(\d+))?$/i);

    if (promptMatch) {
      prompt = promptMatch[1].trim();
      style = promptMatch[2] ? promptMatch[2].trim() : "";
      amount = promptMatch[3] ? parseInt(promptMatch[3]) : 1;
    }

    if (!prompt) {
      return nayan.reply(lang('missing_prompt'), events.threadID, events.messageID);
    }

    // рж╕рж░рзНржмрзЛржЪрзНржЪ 4ржЯрж┐ ржЗржорзЗржЬ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп рж╕рзАржорж╛ржмржжрзНржзрждрж╛
    if (amount > 4) {
      amount = 4;
      nayan.reply("You can generate a maximum of 4 images at a time. Generating 4 images.", events.threadID, events.messageID);
    }

    // рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж░рж┐ржкрзНрж▓рж╛ржЗ
    nayan.reply(lang('generating_message'), events.threadID, events.messageID);

    try {
      const imgData = [];
      for (let i = 0; i < amount; i++) {
        const apiUrl = `https://imggen-delta.vercel.app/?prompt=${encodeURIComponent(prompt)}&style=${encodeURIComponent(style)}`;
        const res = await axios.get(apiUrl);

        const imageUrl = res.data.url;

        if (!imageUrl) {
          // ржпржжрж┐ ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗ URL ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждржмрзЗ рж▓рзБржк ржмрзНрж░рзЗржХ ржХрж░рзЗ ржжрзЗржУрзЯрж╛
          console.error("No image URL found from API for iteration", i);
          if (imgData.length === 0) { // ржпржжрж┐ ржХрзЛржирзЛ ржЗржорзЗржЬржЗ ржЬрзЗржирж╛рж░рзЗржЯ ржирж╛ рж╣рзЯ
            return nayan.reply(lang('error'), events.threadID, events.messageID);
          }
          break;
        }

        const path = __dirname + `/cache/gart_result_${i + 1}.png`;
        const getDown = (await axios.get(imageUrl, { responseType: 'arraybuffer' })).data;
        fs.writeFileSync(path, Buffer.from(getDown, 'utf-8'));
        imgData.push(fs.createReadStream(path));
      }

      if (imgData.length === 0) {
        return nayan.reply(lang('error'), events.threadID, events.messageID);
      }

      nayan.reply({
        attachment: imgData,
        body: `ЁЯФНImagine ResultЁЯФН\n\nЁЯУЭPrompt: ${prompt}\n${style ? `ЁЯОиStyle: ${style}\n` : ''}#я╕ПтГгNumber of Images: ${imgData.length}`
      }, events.threadID, () => {
        // рж╕ржм ржЗржорзЗржЬ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ ржХрзНржпрж╛рж╢ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
        for (let i = 0; i < imgData.length; i++) {
          fs.unlinkSync(__dirname + `/cache/gart_result_${i + 1}.png`);
        }
      });

    } catch (error) {
      console.error("Gart command error:", error);
      nayan.reply(lang('error'), events.threadID, events.messageID);
    }
  }
};
